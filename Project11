
#lang plai-typed
;yücel çiçek
;seçil yıldırgı
;eda karabiber


;Grammar for lambda-desugar
;Λ → v
;Λ → ( λ v Λ )
;Λ → ( Λ Λ )
;Λ → (L Λ)
;L → (LET (LL) Λ)
;LL → (v Λ)
;LL → (v Λ) LL

;TEMPLATE
;(define-type lambda
;  [lambda-id (id : symbol)]
;  [lambda-def (bound : symbol) (body : lambda)]
; ...
;(define-type lambda-sugared
;  [lambda-sugared-id (id : symbol)]
;  [lambda-sugared-def (bound : symbol) (body : lambda-sugared)]
; ...

;We have to construct a let-binding and to use parse sugared.
;template
;(define-type let-binding
;  [let-binding-data (let-bound : symbol) (let-value : lambda-sugared)])
;(define (parse-let-binding [s : s-expression]) : let-binding


 
;; parse-sugared s-expression -> lambda-sugared
;; convert a quoted s expression into the equivalent lambda-sugared form
;; examples
;(define (parse-sugared [s : s-expression]) : lambda-sugared
; (cond
; [(s-exp-symbol? s) (lambda-sugared-id (s-exp->symbol s))]
;[(s-exp-list? s)
;(let ([sl (s-exp->list s)])
; (cond
;...

"Unparse"
;Template
;convert s-expression to unparse method with parser
;unparse lambda -> s-expression 
;(define (unparse [expr : lambda]) : s-expression 
 ;(type-case lambda expr
    ;[lambda-id (id) (symbol->s-exp id)]
    
;[lambda-def (bound body) (list->s-exp (list (symbol->s-exp 'λ) ...



;desugar let template
;(define (desugar-let [lb : let-binding] [body : lambda]) : lambda
 
;sugared exp convert to lambda-sugared 
;(define (desugar [sugared-expr : lambda-sugared]) : lambda



;test
;(test (unparse (desugar (parse-sugared '(LET...


;------------------------------------------------------------------------------------


;Beta leftmost

;; λ-expression grammar
;; λ-exp -> v
;; λ-exp -> (λ-exp λ-exp)
;; λ-exp -> (λ v λ-exp)
;; where v is a symbol.


;; λ-exp is an abstract syntax grammar or a parse tree definition for
;; - λ-exp that defined above.
(define-type λ-exp
  (λ-sym (v : symbol))
  (λ-app (l : λ-exp)(r : λ-exp))
  (λ-def (v : symbol)(p : λ-exp))
  )

;; Tests:
(λ-sym 'x)
(λ-app (λ-sym 'x)(λ-sym 'y))
(λ-def 'v (λ-app (λ-sym 'x)(λ-sym 'y)))

;; parse : s-exp -> λ-exp
;; Purpose : To transform given s-expression to corresponding
(define (parserr (sexp : s-expression)) : λ-exp
  (cond
    [(s-exp-symbol? sexp)(λ-sym (s-exp->symbol sexp))]
    [(s-exp-list? sexp)
     (let ([sexp-list (s-exp->list sexp)])
       (cond
         [(= 2 (length sexp-list))
          (λ-app (parserr (first sexp-list))(parserr (second sexp-list)))]
         [(= 3 (length sexp-list))
          (if (and (symbol=? 'λ (s-exp->symbol (first sexp-list)))
                   (s-exp-symbol? (second sexp-list)))
              (λ-def (s-exp->symbol(second sexp-list))
                     (parserr (third sexp-list)))
              (error 'parserr "Not valid λ-definition")
              )]
         [else (error 'parserr "Not valid length λ-exp")]
         ))]
    [else (error 'parserr "Not valid λ-exp")]
    ))

;; Tests:
(test (parserr (symbol->s-exp 'y))(λ-sym 'y))
(test (parserr '(λ x x))(λ-def 'x (λ-sym 'x)))
(test (parserr '((λ x x) y))(λ-app (λ-def 'x (λ-sym 'x)) (λ-sym 'y)))
(test (parserr '((λ x x)(λ y y)))
      (λ-app (λ-def 'x (λ-sym 'x))(λ-def 'y (λ-sym 'y))))
(test (parserr '(λ x (λ y (y x))))
      (λ-def 'x (λ-def 'y (λ-app (λ-sym 'y) (λ-sym 'x)))))
(test (parserr '(x y)) (λ-app (λ-sym 'x)(λ-sym 'y)))
(test (parserr '(λ x (x y))) (λ-def 'x (λ-app (λ-sym 'x)(λ-sym 'y))))
(test (parserr '(λ y (λ (x x)))) (λ-def 'y (λ-def 'x (λ-sym 'x))))



;; unparse : λ-exp -> s-exp
;; Purpose : To produce concrete syntax from given abstract syntax.
(define (unparser (le : λ-exp)) : s-expression
  (type-case λ-exp le
    (λ-sym (v) (symbol->s-exp v))
    (λ-app (l r)(list->s-exp (list (unparser l)(unparser r))))
    (λ-def (v p)(list->s-exp 
                 (list (symbol->s-exp 'λ)(symbol->s-exp v)(unparser p))))
    ))

;; Test:
(test (unparser (λ-sym 'y))(symbol->s-exp 'y))
(test (unparser (λ-def 'x (λ-sym 'x))) '(λ x x))
(test (unparser (λ-app (λ-def 'x (λ-sym 'x)) (λ-sym 'y)))
      '((λ x x) y))
(test (unparser (λ-app (λ-def 'x (λ-sym 'x))(λ-def 'y (λ-sym 'y))))
      '((λ x x)(λ y y)))
(test (unparser (λ-def 'x (λ-def 'y (λ-app (λ-sym 'y) (λ-sym 'x)))))
      '(λ x (λ y (y x))))

;; =========================================================== ;;

;; A set represented as a list.
;; set-union : (listof symbol) (listof symbol) -> (listof symbol)
;; Purpose : To find the union of two sets.
(define (set-union (s1 : (listof symbol)) (s2 : (listof symbol))) : (listof symbol)
  (foldr (lambda (x y)
           (if (member x y)
               y
               (cons x y))) 
         empty
         (append s1 s2)))

;; Tests:
(test (set-union empty empty) empty)
(test (set-union empty (list 'x)) (list 'x))
(test (set-union (list 'x)(list 'x 'y)) (list 'x 'y))


;; set-difference : (listof symbol) (listof symbol) -> (listof symbol)
;; Purpose : To find the set difference of two sets.
(define (set-difference (s1 : (listof symbol))  (s2 : (listof symbol))) : (listof symbol)
  (filter (lambda (x)
            (not (member x s2)))
          s1))

;; Tests:
(test (set-difference empty (list 'x)) empty)
(test (set-difference (list 'x) empty) (list 'x))
(test (set-difference (list 'x)(list 'x 'y)) empty)
(test (set-difference (list 'x 'y)(list 'x))(list 'y))




;; free-identifier : λ-exp -> (listof symbol)
;; Purpose : To find free identifiers in given λ expression.
;Template
;Free Identifier
;;(define (free-identifier (le : λ-exp)) : (listof symbol)
;;  (type-case λ-exp le
;;    (λ-sym (v)  ...v)
;;    (λ-app (l r) ...l ...r)
;;    (λ-def (v p) ...p ...v)))

;; Tests:
;;(test (free-identifier (parserr (symbol->s-exp 'x))) (list 'x))
;;(test (free-identifier (parserr '(λ x x))) empty)



;; substituter : λ-exp  symbol  λ-exp -> λ-exp
;; Purpose : Substitution is the act of replacing a name 
;; - (in this case, that of the formal parameter) in an expression 
;; - (in this case, the body of the function) with another expression 
;; - (in this case, the actual parameter). [Directly from book.]

;Template
;Substitution
;;(define (substituter [what : λ-exp] [for : symbol] [in : λ-exp]) : λ-exp 
;;  (type-case λ-exp in
    (λ-sym (v) ...)
    (λ-app (l r) ...l ...r)
    (λ-def (v p) ...v ...p)))
    
    
;;    
    
;;    
;; Purpose : λ-calculus beta-reduction naive implementation.
; Template 
; β-Transform
;;(define (beta-transform (le : λ-exp)) : λ-exp
;;  (type-case λ-exp le
;;    (λ-sym (v) ...)
;;    (λ-app (l r) ... l ... r)
;;    (λ-def (v p) ...v ...p)))

;;tests
;; General Tests and Examples:
;;(define SQUARER
  ;;(parserr '(λ f (λ x (f (f x))))))

;(beta-transformer (parserr '((λ x x) a)))
      

;(beta-transformer (parserr '((λ x y) a)))
      





